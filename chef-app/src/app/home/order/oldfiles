ORDER.COMPONENT.TS
===================
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../../auth.service';
import { Http, Response, Headers, RequestOptions, URLSearchParams} from '@angular/http';
import { MdDialog, MdDialogRef, MD_DIALOG_DATA } from '@angular/material';
import { Observable } from 'rxjs/Rx';
import 'rxjs/add/observable/of';
import { DetailsDialogService } from './details-dialog.service';

@Component({
  selector: 'order',
  templateUrl: './order.component.html',
  styleUrls: ['./order.component.css']
})

export class OrderComponent implements OnInit {

  headers: Headers;
  selectedValue = "all";
  ordersSubscription;
  all_orders; message;
  ordersAdded: boolean;
  info: boolean; all: boolean; accepted: boolean; allc: boolean;
  ordersURL = 'https://foodiekiddiee.000webhostapp.com/chef/order-fetcher.php';
  infoURL = 'https://foodiekiddiee.000webhostapp.com/chef/order-info.php';
  
  oi = [];
  tiles = [];

  constructor(private router: Router, private authService: AuthService, private http: Http, private accepthttp: Http/*, private detDiaSer: DetailsDialogService*/) {
    this.headers = new Headers();
    this.headers.append("Content-Type", "application/x-www-form-urlencoded");
    this.info = false; this.allc = false;
    this.accepted = false; this.all = true;
    this.getOrders();
    this.ordersSubscription = Observable.interval(1000 * 60 * 5).subscribe(x => {
      //Even after 9am, if some order isn't accepted by any chef,
      //UI of 'all orders under chef's expertise' has to be updated.
      let yetToAssignChef: boolean = false;
      for(let order in this.all_orders["data"]){
        if(this.all_orders["data"][order]["chefID"]==null){
          yetToAssignChef=true;
          break;
        }
      }
      let tempData = this.all_orders["data"];
      var d = new Date();
      if(d.getHours()<9||yetToAssignChef) {
        this.getOrders();
        if(this.all_orders["data"].length>tempData.length) this.ordersAdded = true;
        else this.ordersAdded = false;
      }
    });
  }
  
  options = [
    {value: 'all', viewValue: 'All'},
    {value: 'chef-cuisine', viewValue: 'All ' + this.authService.expertise},
    {value: 'accepted', viewValue: 'Accepted'}
  ];

  ngOnInit() {
  }

  ngOnDestroy(){
    this.ordersSubscription.unsubscribe();
  }

  goto(which:string){
    switch(which){
      case 'order': this.router.navigate(['home/order']); break;
      case 'stock': this.router.navigate(['home/stock']); break;
      case 'profile': this.router.navigate(['home/profile']); break;
      default: this.router.navigate(['page-not-found']);
    }
  }

  getOrders(){
    let date = new Date(); let datestr: string;
    let dd = date.getDate(); let dds: string;
    let mm = (date.getMonth()+1); let mms: string;
    let yyyy = date.getFullYear();
    if(dd<10) dds = '0' + dd;
    else dds = dd.toString();
    if(mm<10) mms = '0' + mm;
    else mms = mm.toString();
    datestr = yyyy + '-' + mms + '-' + dds;
    let body = {"date":datestr,"kitchenID":this.authService.kitchenID};
    this.http.post(this.ordersURL, body,{ headers: this.headers}).subscribe(
        result => this.all_orders = result.json(),
        () => console.log("Failed..."),
        () => { 
          console.log(this.all_orders);
          this.optionChooser();
        });
  }

  orderInfo(tile){
    this.oi["items"] = [];
    this.oi["orderID"] = tile["orderID"];
    this.oi["deliveryTime"] = tile["deliveryTime"];
    for(let row in this.all_orders["data"]){
      if(this.all_orders["data"][row]["orderID"]==tile["orderID"]){
        this.oi["items"].push(this.all_orders["data"][row]);
      }
    }
    this.all = false; this.accepted = false; this.allc = false; this.info = true;
  }

  orderComposer(){
    let orders = []; let oldRow = false;
    for(let row in this.all_orders["data"]){
      let temp = {};
      temp["orderID"] = this.all_orders["data"][row]["orderID"];
      temp["deliveryTime"] = this.all_orders["data"][row]["deliveryTime"];
      for(let x in orders){
        if(orders[x]["orderID"]==temp["orderID"]) { oldRow = true; break; }
      }
      if(!oldRow) orders.push(temp);
      oldRow = false;
    }
    this.tiles = orders;
    if(this.tiles.length == 0) this.message = "None to display. Kindly refresh.";
    else this.message = null;
    if(!this.info) this.all = true;
    this.accepted = false; this.allc = false;
  }

  acceptedOrders(){
    this.tiles = [];
    for(let row in this.all_orders["data"]){
      if(this.all_orders["data"][row]["chefID"]==this.authService.userID){
        let temp = {};
        temp["orderID"] = this.all_orders["data"][row]["orderID"];
        temp["deliveryTime"] = this.all_orders["data"][row]["deliveryTime"];
        temp["item"] = this.all_orders["data"][row]["name"];
        temp["qty"] = this.all_orders["data"][row]["qty"];
        temp["itemID"] = this.all_orders["data"][row]["id"];
        this.tiles.push(temp);
      }
    }
    console.log(this.tiles);
    if(this.tiles.length == 0) this.message = "None to display. Kindly refresh.";
    else this.message = null;
    this.info = false; this.all = false;
    this.allc = false; this.accepted = true;
  }

  cuisineOrders(){
    this.tiles = [];
    for(let row in this.all_orders["data"]){
      let cc = this.all_orders["data"][row]["cuisine"] + " " + this.all_orders["data"][row]["category"];
      if((cc==this.authService.expertise) && 
          (this.all_orders["data"][row]["chefID"]==null)){
        let temp = {};
        temp["orderID"] = this.all_orders["data"][row]["orderID"];
        temp["deliveryTime"] = this.all_orders["data"][row]["deliveryTime"];
        temp["item"] = this.all_orders["data"][row]["name"];
        temp["qty"] = this.all_orders["data"][row]["qty"];
        temp["itemID"] = this.all_orders["data"][row]["id"];
        this.tiles.push(temp);
      }
    }
    console.log(this.tiles);
    if(this.tiles.length == 0) this.message = "None to display. Kindly refresh.";
    else this.message = null;
    this.info = false; this.all = false;
    this.accepted = false; this.allc = true;
  }

  acceptOrder(tile){
    let url = "https://foodiekiddiee.000webhostapp.com/orders/direct-to-chefs/accept-orders.php";
    let body = {
      "orderID":tile["orderID"],
      "itemID":tile["itemID"],
      "chefID":this.authService.userID
    };
    let acceptheaders = new Headers();
    let acceptRes;
    acceptheaders.append("Content-Type", "application/x-www-form-urlencoded");
    this.accepthttp.post(url, body,{ headers: acceptheaders}).subscribe(
        result => acceptRes = result.json(),
        () => console.log("Failed..."),
        () => {
          console.log(acceptRes);
          if(acceptRes["data"]=="success"){
            this.getOrders();
          }
        });
  }

  viewDetails(tile){
    //this.detDiaSer.setDetails(tile.id);
  }

  optionChooser(){
    switch(this.selectedValue){
      case 'accepted':
        this.acceptedOrders();
        break;
      case 'chef-cuisine':
        this.cuisineOrders();
        break;
      default:
        if(!this.info) this.orderComposer();
      }
    }
}

@Component({
  selector: 'details-dialog',
  templateUrl: 'details-dialog.html',
  styleUrls: ['details-dialog.css']
})

export class DetailsDialogComponent{

  id:string;

  constructor(public dialogRef: MdDialogRef<DetailsDialogComponent>) {}

}



ORDER.COMPONENT.HTML
====================
<div class="wrapper">
	<div class="pinkDivision">
	</div>
	<div class="mainDivision">
		<md-toolbar>
			<span>Orders for the Day</span>
    		<span class="spacer"></span>
    		<img class="iconStyler" alt="Home" src="../../../assets/icon_house.png" (click)="goto('order')">
    		<img class="iconStyler" alt="Profile" src="../../../assets/icon_user.png" (click)="goto('profile')">
    		<img class="iconStyler" alt="Stock" src="../../../assets/icon_store.png" (click)="goto('stock')">
		</md-toolbar>
		<div class="order-list">
			<div class="all-orders" *ngIf="all">
				<span style="color:#FF5722;font-weight:600;margin-left: 8px">{{message}}</span>
				<md-grid-list cols="3" rowHeight="300px" class="order-grid">
				  <md-grid-tile *ngFor="let tile of tiles" [colspan]="1" [rowspan]="1">
				    <md-card class="order-card" (click)="orderInfo(tile)">
					  <md-card-header>
					    <md-card-title> ORDER #{{tile.orderID}} </md-card-title>
					    <md-card-subtitle> D.TIME: {{tile.deliveryTime}}</md-card-subtitle>
					  </md-card-header>
					</md-card>
				  </md-grid-tile>
				</md-grid-list>
			</div>
			<div class="allc-orders" *ngIf="allc">
				<span style="color:#FF5722;font-weight:600;margin-left: 8px">{{message}}</span>
				<md-grid-list cols="3" rowHeight="300px" class="order-grid">
				  <md-grid-tile *ngFor="let tile of tiles" [colspan]="1" [rowspan]="1">
				    <md-card class="order-card">
						  <md-card-header>
						   	<md-card-subtitle class="aoid" style="margin-bottom: 4px;"> ORDER #{{tile.orderID}} </md-card-subtitle>
						    <md-card-title>
						    	<span class="atn"> {{tile.item}} </span>
						    	<span class="atq"> QUANTITY: {{tile.qty}} </span>
						    	<div class="adt">
							    	<span><img src="../../../assets/icon_house.png"></span>
							    	<span style="color: #3F51B5; font-weight: 600;"> {{tile.deliveryTime}} </span>
						    	</div>
						   	</md-card-title>
						  </md-card-header>
						  <md-card-actions>
						    <button md-button (click)="acceptOrder(tile)" class="acceptButton">ACCEPT</button>
						  </md-card-actions>
						</md-card>
				  </md-grid-tile>
				</md-grid-list>
			</div>
			<div class="accepted-orders" *ngIf="accepted">
				<span style="color:#FF5722;font-weight:600;margin-left: 8px">{{message}}</span>
				<md-grid-list cols="3" rowHeight="300px" class="order-grid">
				  <md-grid-tile *ngFor="let tile of tiles" [colspan]="1" [rowspan]="1">
				    <md-card class="order-card">
						  <md-card-header>
						   	<md-card-subtitle class="aoid"> ORDER #{{tile.orderID}} </md-card-subtitle>
						    <md-card-title>
						    	<span class="atn"> {{tile.item}} </span>
						    	<span class="fill-remaining-space"></span>
						    	<span class="atq"> QUANTITY: {{tile.qty}} </span>
						    	<div class="adt">
							    	<span><img src="../../../assets/icon_house.png"></span>
							    	<span style="color: #DF1944; font-weight: 600;"> {{tile.deliveryTime}} </span>
						    	</div>
						   	</md-card-title>
						  </md-card-header>
						  <md-card-actions>
						    <button md-button (click)="acceptOrder(tile)" class="acceptButton">ACCEPT</button>
						  </md-card-actions>
						</md-card>
				  </md-grid-tile>
				</md-grid-list>
			</div>
			<div class="order-info" *ngIf="info">
				<span class="alertIncome" *ngIf="ordersAdded">ALERT: Check new orders!</span>
				<h4>ORDER #{{oi.orderID}}</h4>
				<h5>D.TIME: {{oi.deliveryTime}}</h5>
				<md-grid-list cols="3" rowHeight="200px" class="order-grid">
				  <md-grid-tile *ngFor="let oc of oi.items" [colspan]="1" [rowspan]="1">
				    <md-card class="order-card">
					  <md-card-header>
					    <md-card-title>NAME:</md-card-title>
					    <md-card-subtitle>{{oc.name}}</md-card-subtitle>
					    <md-card-title>QUANTITY:</md-card-title>
					    <md-card-subtitle>{{oc.qty}}</md-card-subtitle>
					  </md-card-header>
					</md-card>
				  </md-grid-tile>
				</md-grid-list>
				<button md-button id="backButton" (click)="info=false;all=true"> BACK </button>
			</div>
		</div>
	</div>
</div>



ORDER.COMPONENT.CSS
===================
.wrapper{
	display: flex;
}
.toolbarDivision{
	width: 100%;
}
.pinkDivision{
	background-color: #df1944;
	height:100vh;
	width:35vw;
}
.mainDivision{
	height: 100%;
	width: 100%;
	/*align-self: center;*/
}
/deep/.mat-toolbar{
	color: #df1944;
	font-family: 'Roboto', sans-serif;
}
.iconStyler{
	margin: 0 4px;
	cursor: pointer;
}
#backButton{
	background-color: #df1944;
	color:#ffffff;
	width: 50%;
	display: block;
	font-size: large;
	margin: auto;
	font-family: 'Roboto', sans-serif;
}
.viewSelector{
	width: 100%;
	padding-bottom: 18px;
    border-bottom-style: solid;
    border-bottom-color: rgb(232, 229, 229);
    border-bottom-width: 1px;
}
/deep/.mat-select{
	display: block !important;
    margin: auto;
    width: 50%;
}
/deep/.mat-select-arrow, /deep/.mat-select-disabled /deep/.mat-select-value, /deep/.mat-select-underline, /deep/.mat-select-trigger{
	color: #FFC107 !important;
}
/deep/.mat-select-underline{
	background-color: #FF9800 !important;
}
/deep/.mat-select-trigger{
	color: #FFC107;
}
/deep/.mat-primary, /deep/.mat-option.mat-selected {
    color: #df1944 !important;
}
/deep/.mat-card{
	width: auto;
	height: auto;
	margin: auto;
}
.order-info /deep/.mat-card{
	background: antiquewhite;
	padding: 16px 16px; 
	font-family: 'Roboto', sans-serif;
}
.all-orders md-card-subtitle{
	color: #795548;
    font-weight: bold;
}
.all-orders md-card-title{
	color: #607D8B;
    font-weight: bold;
}
.all-orders .order-card{
	cursor: pointer;
}
.fill-remaining-space{
	flex: 1 1 auto;
}
.acceptButton{
	margin: auto !important;
    background: #FFC107;
    color: white;
    display: block;
    font-weight: 600;
}
.adt, .atq, .atn, .aoid{
	display: block;
	margin: auto;
}
.atn{
	font-weight: 600;
	color: #d61616;
}
.atq{
	font-weight: 600;
	color: #28772b;
}
.allc-orders /deep/.mat-card-title{
	margin-bottom: 4px !important;
}